<%- include('./partials/head2') %>
<%- include('./partials/navbar') %>

<body>
  <section class="hero-section" data-aos="fade-up">
    <div class="hero-content">
      <h1>Welcome to <span class="highlight">BlogNest</span></h1>
      <p>Discover powerful stories, personal thoughts, and creative ideas from writers around the world.</p>
    </div>
  </section>

  <section class="blogs-section">
    <h2 class="section-title" data-aos="fade-up">Latest Posts</h2>
    <div class="blogs-grid">
      <% if (posts && posts.length > 0) { %>
        <% posts.forEach(post => { %>
          <article class="blog-card" data-aos="fade-up">
            <div class="blog-image">
              <img 
                src="<%= post.Image ? post.Image.replace('public/', '') : '/images/default-blog.jpg' %>" 
                alt="<%= post.title %>"
                onerror="this.src='/images/default-blog.jpg'"
              >
            </div>
            <div class="blog-content">
              <h2><%= post.title %></h2>
              <p><%= post.content.substring(0, 150) %>...</p>
              
              <div class="blog-meta">
                <div class="author-date">
                  <span class="author">
                    <i class="fas fa-user"></i>
                    <%= post.author ? post.author.username : 'Unknown Author' %> , 
                  </span>
                  <span class="date">
                    <i class="far fa-calendar"></i>
                    <%= new Date(post._id.getTimestamp()).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    }) %>
                  </span>
                </div>
              </div>

              <% if(post.tags && post.tags.length > 0) { %>
                <div class="tags">
                  <% post.tags.forEach(tag => { %>
                    <span class="tag"><%= tag %></span>
                  <% }) %>
                </div>
              <% } %>

              <div class="blog-interactions">
                <a href="/blog/readMore/<%= post._id.toString() %>" class="read-more">
                  Read More <i class="fas fa-arrow-right"></i>
                </a>
                <button class="like-btn <%= post.likes && post.likes.includes(user._id) ? 'liked' : '' %>" 
                        data-post-id="<%= post._id %>">
                  <i class="<%= post.likes && post.likes.includes(user._id) ? 'fas' : 'far' %> fa-heart"></i>
                  <span class="like-count"><%= post.likes ? post.likes.length : 0 %></span>
                </button>
                
                <button class="comment-btn" data-post-id="<%= post._id %>">
                  <i class="far fa-comment"></i>
                  <span class="comment-count"><%= post.comments ? post.comments.length : 0 %></span>
                </button>
              </div>

              <!-- Comments Section -->
              <div class="comments-section" id="comments-<%= post._id %>" style="display: none;">
                <div class="comments-list">
                  <% post.comments.forEach(comment => { %>
                    <div class="comment">
                      <div class="comment-header">
                        <strong><%= comment.user && comment.user.username ? comment.user.username : 'Anonymous' %></strong>
                        <% if (user._id.toString() === comment.user._id.toString()) { %>
                          <button class="delete-comment" data-comment-id="<%= comment._id %>">
                            <i class="fas fa-trash"></i>
                          </button>
                        <% } %>
                      </div>
                      <p><%= comment.comment %></p>
                      <small><%= new Date(comment.date).toLocaleDateString() %></small>
                    </div>
                  <% }) %>
                </div>
                <form class="comment-form" data-post-id="<%= post._id %>">
                  <input type="text" name="comment" placeholder="Add a comment..." required>
                  <button type="submit"><i class="fas fa-paper-plane"></i></button>
                </form>
              </div>
            </div>
          </article>
        <% }) %>
      <% } else { %>
        <div class="no-blogs" data-aos="fade-up">
          <i class="fas fa-book-reader"></i>
          <h2>No posts yet</h2>
          <p>Check back later for new stories!</p>
        </div>
      <% } %>
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Like functionality
      const likeButtons = document.querySelectorAll('.like-btn');
      likeButtons.forEach(button => {
        button.addEventListener('click', async () => {
          const postId = button.dataset.postId;
          try {
            const response = await fetch(`/blog/like/${postId}`, {
              method: 'POST'
            });
            if (response.ok) {
              const data = await response.json();
              const likeIcon = button.querySelector('i');
              const likeCount = button.querySelector('.like-count');
              
              likeIcon.className = data.liked ? 'fas fa-heart' : 'far fa-heart';
              likeCount.textContent = data.likesCount;
              button.classList.toggle('liked', data.liked);
            }
          } catch (error) {
            console.error('Error:', error);
          }
        });
      });

      // Comment functionality
      const commentButtons = document.querySelectorAll('.comment-btn');
      commentButtons.forEach(button => {
        button.addEventListener('click', () => {
          const postId = button.dataset.postId;
          const commentsSection = document.getElementById(`comments-${postId}`);
          commentsSection.style.display = commentsSection.style.display === 'none' ? 'block' : 'none';
        });
      });

      // Comment form submission
      const commentForms = document.querySelectorAll('.comment-form');
commentForms.forEach(form => {
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const postId = form.dataset.postId;
        const input = form.querySelector('input[name="comment"]');
        const comment = input.value.trim();
        
        if (comment) {
            try {
                const response = await fetch(`/blog/comment/${postId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ comment })
                });
                
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();

                if (data.success) {
                    const commentsList = document.querySelector(`#comments-${postId} .comments-list`);
                    
                    // Since this is the current user's comment, we always show the delete button
                    const deleteButton = `
                        <button class="delete-comment" data-comment-id="${data.commentId}">
                            <i class="fas fa-trash"></i>
                        </button>
                    `;

                    const newComment = document.createElement('div');
                    newComment.className = 'comment';
                    newComment.innerHTML = `
                        <div class="comment-header">
                            <strong>${data.username}</strong>
                            ${deleteButton}
                        </div>
                        <p>${data.comment}</p>
                        <small>${new Date(data.date).toLocaleDateString()}</small>
                    `;
                    
                    commentsList.insertBefore(newComment, commentsList.firstChild);
                    input.value = '';
                    
                    // Update comment count
                    const commentCount = form.closest('.blog-card')
                        .querySelector('.comment-btn .comment-count');
                    const currentCount = parseInt(commentCount.textContent || '0');
                    commentCount.textContent = currentCount + 1;
                    
                    // Show comments section
                    const commentsSection = document.getElementById(`comments-${postId}`);
                    commentsSection.style.display = 'block';
                } else {
                    throw new Error(data.message || 'Failed to add comment');
                }
            } catch (error) {
                console.error('Error:', error);
                alert(error.message || 'Failed to add comment. Please try again.');
            }
        }
    });
});
      // delete comment functionality
      document.addEventListener('click', async (e) => {
          if (e.target.closest('.delete-comment')) {
              const button = e.target.closest('.delete-comment');
              const commentElement = button.closest('.comment');
              const commentsSection = commentElement.closest('.comments-section');
              const postId = commentsSection.id.split('-')[1];
              const commentId = button.dataset.commentId;

              try {
                  const response = await fetch(`/blog/comment/${postId}/${commentId}`, {
                      method: 'DELETE'
                  });

                  if (response.ok) {
                      const data = await response.json();
                      if (data.success) {
                          // Remove the comment element
                          commentElement.remove();
                          
                          // Find the blog-card parent and update comment count
                          const blogCard = commentsSection.closest('.blog-card');
                          const commentCountElement = blogCard.querySelector('.comment-btn .comment-count');
                          const currentCount = parseInt(commentCountElement.textContent);
                          commentCountElement.textContent = currentCount - 1;
                      } else {
                          alert(data.message || 'Failed to delete comment');
                      }
                  } else {
                      throw new Error('Failed to delete comment');
                  }
              } catch (error) {
                  console.error('Error:', error);
                  alert('Failed to delete comment. Please try again.');
              }
          }
      });
    });
  </script>
</body>
</html>
